import { Lecture } from "@/types";

export const cssBasicsLecture: Lecture = {
  id: "css-basics-lecture",
  title: "Основы CSS: Стилизация и дизайн веб-страниц",
  description:
    "Комплексное изучение CSS для создания красивых и современных веб-сайтов. Курс охватывает селекторы, свойства, позиционирование, flexbox и создание адаптивных макетов.",
  groupId: "user-interfaces",
  createdAt: new Date("2025-10-11"),
  updatedAt: new Date("2025-10-11"),
  tags: ["user-interfaces", "css", "стилизация", "дизайн", "верстка"],
  difficulty: "beginner",
  duration: 5.0,

  slides: [
    {
      id: "slide-1",
      title: "Основы CSS: Стилизация и дизайн веб-страниц",
      type: "title",
      content: "Полное руководство по CSS для создания современных веб-сайтов",
      keyPoints: [
        {
          title: "Что такое CSS",
          description: "Понимание роли CSS в веб-разработке",
        },
        {
          title: "Способы подключения стилей",
          description: "Различные методы применения CSS к HTML",
        },
        {
          title: "Селекторы и свойства",
          description: "Изучение основных инструментов стилизации",
        },
        {
          title: "Практическое применение",
          description: "Создание красивых и функциональных дизайнов",
        },
      ],
    },

    {
      id: "slide-2",
      title: "Что такое CSS?",
      type: "content",
      content:
        "CSS (Cascading Style Sheets — каскадные таблицы стилей) — это язык для описания внешнего вида HTML-документа. Если HTML отвечает за структуру и содержание страницы, то CSS определяет, как эта страница будет выглядеть.\n\n**Зачем нужен CSS:**\nCSS позволяет отделить содержание от представления. Это означает, что один и тот же HTML-документ может выглядеть совершенно по-разному в зависимости от применённых стилей. CSS управляет цветами, шрифтами, размерами, отступами, расположением элементов и многим другим.\n\n**Основные возможности CSS:**\n• Изменение цветов текста и фона\n• Настройка шрифтов и размеров текста\n• Управление расположением элементов на странице\n• Создание анимаций и переходов\n• Адаптивный дизайн для разных устройств\n• Создание сложных макетов без таблиц",
    },

    {
      id: "slide-3",
      title: "История и эволюция CSS",
      type: "content",
      content:
        "CSS был создан в 1996 году для решения проблемы стилизации веб-страниц. До появления CSS разработчики использовали HTML-теги для оформления, что делало код громоздким и сложным в поддержке.\n\n**Основные этапы развития:**\n• **CSS1 (1996)** — базовые возможности стилизации текста и цветов\n• **CSS2 (1998)** — добавлено позиционирование, медиа-типы, z-index\n• **CSS2.1 (2011)** — исправления и уточнения CSS2\n• **CSS3 (2011-сейчас)** — модульная система, анимации, трансформации, flexbox, grid\n\n**Современный CSS:**\nСегодня CSS — это мощный инструмент, который позволяет создавать сложные интерактивные интерфейсы. CSS3 продолжает развиваться, добавляя новые модули и возможности. Современные браузеры поддерживают большинство CSS3 функций, что делает веб-дизайн более гибким и выразительным.",
    },

    {
      id: "slide-4",
      title: "Синтаксис CSS",
      type: "content",
      content:
        "CSS состоит из правил, которые определяют, как должны выглядеть HTML-элементы. Каждое правило состоит из селектора и блока объявлений.\n\n**Структура CSS-правила:**\n`\nселектор {\n  свойство: значение;\n  свойство: значение;\n}\n`\n\n**Компоненты правила:**\n• **Селектор** — определяет, к каким элементам применяются стили\n• **Свойство** — характеристика, которую мы хотим изменить (цвет, размер, шрифт)\n• **Значение** — конкретное значение свойства\n• **Объявление** — пара свойство:значение\n• **Блок объявлений** — набор объявлений в фигурных скобках\n\n**Важные правила синтаксиса:**\n• Каждое объявление заканчивается точкой с запятой\n• Свойство и значение разделяются двоеточием\n• Можно писать несколько объявлений в одном блоке\n• Пробелы и переносы строк не влияют на работу CSS (но улучшают читаемость)",
    },

    {
      id: "slide-5",
      title: "Простой пример CSS",
      type: "code",
      content:
        "Рассмотрим базовый пример CSS-правила. Этот код изменяет внешний вид всех параграфов на странице, делая текст синим, увеличивая размер шрифта и добавляя отступ снизу.",
      codeExample: {
        language: "css",
        title: "Базовое CSS-правило",
        code: `/* Это комментарий в CSS */
/* Он не влияет на работу кода */

/* Правило для всех параграфов */
p {
  color: blue;           /* Цвет текста - синий */
  font-size: 16px;       /* Размер шрифта - 16 пикселей */
  margin-bottom: 20px;   /* Отступ снизу - 20 пикселей */
}

/* Правило для заголовков первого уровня */
h1 {
  color: darkgreen;      /* Тёмно-зелёный цвет */
  font-size: 32px;       /* Крупный размер */
  text-align: center;    /* Выравнивание по центру */
}`,
      },
    },

    {
      id: "slide-6",
      title: "Три способа подключения CSS",
      type: "content",
      content:
        "Существует три основных способа применения CSS к HTML-документу. Каждый имеет свои преимущества и используется в разных ситуациях.\n\n**1. Внешний файл (рекомендуется):**\nСтили хранятся в отдельном .css файле и подключаются через тег <link> в секции <head>. Это самый правильный и профессиональный подход.\n**Преимущества:** код чистый, стили можно использовать на нескольких страницах, легко поддерживать.\n\n**2. Внутренние стили (в теге <style>):**\nCSS-правила размещаются внутри тега <style> в секции <head> HTML-документа. Используется для стилей, специфичных для одной страницы.\n**Преимущества:** не нужен отдельный файл, удобно для небольших проектов или тестирования.\n\n**3. Встроенные стили (inline):**\nСтили применяются непосредственно к элементу через атрибут style. Это наименее предпочтительный способ.\n**Недостатки:** трудно поддерживать, нарушает принцип разделения структуры и оформления, имеет высокий приоритет.",
    },

    {
      id: "slide-7",
      title: "Подключение внешнего CSS файла",
      type: "code",
      content:
        "Внешний CSS файл — это отдельный файл с расширением .css, который содержит все стили для сайта. Это профессиональный и правильный способ работы с CSS. Файл подключается в секции <head> HTML-документа с помощью тега <link>.",
      codeExample: {
        language: "html",
        title: "Подключение внешнего CSS",
        code: `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Моя страница</title>
    
    <!-- Подключение внешнего CSS файла -->
    <link rel="stylesheet" href="styles.css">
    
    <!-- Можно подключить несколько файлов -->
    <link rel="stylesheet" href="reset.css">
    <link rel="stylesheet" href="main.css">
    <link rel="stylesheet" href="responsive.css">
</head>
<body>
    <h1>Заголовок страницы</h1>
    <p>Текст параграфа</p>
</body>
</html>`,
      },
    },

    {
      id: "slide-8",
      title: "Содержимое файла styles.css",
      type: "code",
      content:
        "Вот как выглядит содержимое внешнего CSS файла. Обратите внимание, что в CSS файле нет HTML тегов — только CSS правила. Файл должен быть сохранён с расширением .css (например, styles.css).",
      codeExample: {
        language: "css",
        title: "Файл styles.css",
        code: `/* Сброс базовых стилей браузера */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Стили для body */
body {
  font-family: Arial, sans-serif;
  line-height: 1.6;
  color: #333;
  background-color: #f4f4f4;
}

/* Стили для заголовков */
h1 {
  color: #2c3e50;
  margin-bottom: 20px;
  font-size: 36px;
}

/* Стили для параграфов */
p {
  margin-bottom: 15px;
  font-size: 16px;
}`,
      },
    },

    {
      id: "slide-9",
      title: "Внутренние стили",
      type: "code",
      content:
        "Внутренние стили размещаются прямо в HTML-документе внутри тега <style> в секции <head>. Это удобно для небольших страниц или когда стили нужны только на одной странице. Синтаксис CSS внутри тега <style> такой же, как и во внешнем файле.",
      codeExample: {
        language: "html",
        title: "Внутренние стили в теге <style>",
        code: `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Страница с внутренними стилями</title>
    
    <!-- Внутренние стили -->
    <style>
        body {
            background-color: #e8f4f8;
            font-family: 'Georgia', serif;
            padding: 20px;
        }
        
        h1 {
            color: #2980b9;
            text-align: center;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }
        
        p {
            color: #555;
            line-height: 1.8;
            max-width: 800px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <h1>Добро пожаловать</h1>
    <p>Это пример страницы с внутренними стилями.</p>
</body>
</html>`,
      },
    },

    {
      id: "slide-10",
      title: "Встроенные стили (inline)",
      type: "code",
      content:
        "Встроенные стили применяются непосредственно к элементу через атрибут style. Это наименее предпочтительный способ, так как он смешивает HTML и CSS, усложняет поддержку кода и имеет высокий приоритет (переопределяет другие стили). Используйте inline-стили только в крайних случаях.",
      codeExample: {
        language: "html",
        title: "Встроенные стили (не рекомендуется)",
        code: `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Встроенные стили</title>
</head>
<body>
    <!-- Встроенные стили через атрибут style -->
    <h1 style="color: red; font-size: 40px; text-align: center;">
        Заголовок с встроенными стилями
    </h1>
    
    <p style="color: blue; font-size: 18px; background-color: yellow;">
        Параграф с встроенными стилями
    </p>
    
    <!-- Недостатки: -->
    <!-- - Трудно поддерживать -->
    <!-- - Код становится громоздким -->
    <!-- - Невозможно переиспользовать -->
    <!-- - Высокий приоритет (сложно переопределить) -->
</body>
</html>`,
      },
    },

    {
      id: "slide-11",
      title: "Типы CSS селекторов",
      type: "content",
      content:
        "Селекторы — это способ выбора HTML-элементов, к которым мы хотим применить стили. CSS предоставляет множество типов селекторов для точного выбора нужных элементов.\n\n**Основные типы селекторов:**\n\n**1. Селектор по тегу (элемента)**\nВыбирает все элементы определённого типа. Например, `p` выберет все параграфы.\n\n**2. Селектор по классу**\nВыбирает элементы с определённым классом. Начинается с точки: `.название-класса`\n\n**3. Селектор по ID**\nВыбирает элемент с уникальным идентификатором. Начинается с решётки: `#идентификатор`\n\n**4. Универсальный селектор**\nВыбирает все элементы на странице: `*`\n\n**5. Селекторы атрибутов**\nВыбирают элементы на основе их атрибутов: `[атрибут]`\n\n**6. Псевдоклассы и псевдоэлементы**\nВыбирают элементы в определённом состоянии: `:hover`, `::before`",
    },

    {
      id: "slide-12",
      title: "Селектор по тегу (элемента)",
      type: "code",
      content:
        "Селектор по тегу — самый простой тип селектора. Он выбирает все элементы определённого типа на странице. Это удобно для применения базовых стилей ко всем элементам одного типа. Например, если вы хотите, чтобы все параграфы имели одинаковый размер шрифта и цвет.",
      codeExample: {
        language: "css",
        title: "Селекторы по тегу",
        code: `/* Выбирает ВСЕ параграфы на странице */
p {
  color: #333;
  font-size: 16px;
  line-height: 1.6;
}

/* Выбирает ВСЕ заголовки h1 */
h1 {
  color: #2c3e50;
  font-size: 36px;
  font-weight: bold;
}

/* Выбирает ВСЕ ссылки */
a {
  color: #3498db;
  text-decoration: none;
}

/* Выбирает ВСЕ элементы списка */
li {
  margin-bottom: 10px;
}

/* Селектор body влияет на всю страницу */
body {
  font-family: Arial, sans-serif;
  background-color: #f5f5f5;
}`,
      },
    },

    {
      id: "slide-13",
      title: "Что такое классы в HTML и CSS",
      type: "content",
      content:
        '**Классы (classes)** — это способ группировки элементов для применения к ним одинаковых стилей. Класс можно применить к любому количеству элементов, и один элемент может иметь несколько классов.\n\n**Зачем нужны классы:**\n• Применить одинаковые стили к разным элементам\n• Создавать переиспользуемые компоненты дизайна\n• Выделять определённые элементы среди других такого же типа\n• Группировать элементы по функциональности или стилю\n\n**Как работают классы:**\n1. В HTML элементу присваивается класс через атрибут `class="название"`\n2. В CSS класс выбирается селектором, который начинается с точки: `.название`\n3. Все элементы с этим классом получат указанные стили\n\n**Правила именования классов:**\n• Используйте осмысленные имена (button, header, card)\n• Можно использовать дефисы: main-content, nav-item\n• Не начинайте с цифры\n• Регистр имеет значение: Button и button — разные классы',
    },

    {
      id: "slide-14",
      title: "Селектор по классу",
      type: "code",
      content:
        "Селектор по классу — один из самых часто используемых селекторов. Он позволяет применять стили к группе элементов, независимо от их типа. В CSS класс обозначается точкой перед названием.",
      codeExample: {
        language: "html",
        title: "HTML с классами",
        code: `<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <!-- Один класс применён к параграфу -->
    <p class="highlight">Этот текст будет выделен</p>
    
    <!-- Тот же класс применён к заголовку -->
    <h2 class="highlight">Этот заголовок тоже выделен</h2>
    
    <!-- Обычный параграф без класса -->
    <p>Обычный текст без стилей класса</p>
    
    <!-- Элемент с несколькими классами -->
    <div class="card featured">
        <h3>Карточка товара</h3>
        <p class="price">1999 руб.</p>
    </div>
    
    <!-- Ещё одна карточка с теми же классами -->
    <div class="card featured">
        <h3>Другой товар</h3>
        <p class="price">2499 руб.</p>
    </div>
</body>
</html>`,
      },
    },

    {
      id: "slide-15",
      title: "CSS для классов",
      type: "code",
      content:
        "В CSS файле классы определяются с помощью точки перед названием. Все элементы с этим классом, независимо от типа тега, получат указанные стили. Это очень мощный инструмент для создания переиспользуемых компонентов дизайна.",
      codeExample: {
        language: "css",
        title: "Файл styles.css с классами",
        code: `/* Класс highlight - для выделения важной информации */
/* Можно применить к любому элементу */
.highlight {
  background-color: #fff3cd;
  color: #856404;
  padding: 10px;
  border-left: 4px solid #ffc107;
  font-weight: bold;
}

/* Класс card - для карточек товаров */
.card {
  background-color: white;
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Класс featured - для особых карточек */
.featured {
  border-color: #3498db;
  border-width: 2px;
}

/* Класс price - для цен */
.price {
  color: #e74c3c;
  font-size: 24px;
  font-weight: bold;
}`,
      },
    },

    {
      id: "slide-16",
      title: "Что такое ID в HTML и CSS",
      type: "content",
      content:
        "**ID (идентификатор)** — это уникальное имя элемента на странице. В отличие от классов, ID должен быть уникальным — один ID может использоваться только для одного элемента на странице.\n\n**Ключевые отличия ID от класса:**\n• ID уникален — используется только один раз на странице\n• Класс может повторяться — применяется к множеству элементов\n• ID имеет более высокий приоритет в CSS\n• ID используется для JavaScript и якорных ссылок\n\n**Когда использовать ID:**\n• Для уникальных элементов (header, footer, main-content)\n• Когда нужна якорная ссылка (переход к разделу страницы)\n• Для работы с JavaScript\n• Для форм (связь label и input)\n\n**Когда использовать класс:**\n• Для повторяющихся элементов (кнопки, карточки)\n• Для группировки похожих элементов\n• Для создания переиспользуемых компонентов\n• В большинстве случаев стилизации\n\n**Рекомендация:** для стилизации предпочтительнее использовать классы, а ID оставить для JavaScript и якорей.",
    },

    {
      id: "slide-17",
      title: "Селектор по ID",
      type: "code",
      content:
        "Селектор по ID в CSS обозначается символом решётки (#) перед названием идентификатора. ID должен быть уникальным на странице. Используйте ID для уникальных элементов, таких как шапка сайта, главное меню, подвал.",
      codeExample: {
        language: "html",
        title: "HTML с ID",
        code: `<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <!-- Уникальная шапка сайта -->
    <header id="site-header">
        <h1>Мой сайт</h1>
        <nav id="main-nav">
            <a href="#home">Главная</a>
            <a href="#about">О нас</a>
            <a href="#contact">Контакты</a>
        </nav>
    </header>
    
    <!-- Основной контент -->
    <main id="main-content">
        <h2>Добро пожаловать</h2>
        <p>Содержимое страницы</p>
    </main>
    
    <!-- Уникальный подвал -->
    <footer id="site-footer">
        <p>&copy; 2025 Мой сайт</p>
    </footer>
    
    <!-- ОШИБКА: нельзя использовать один ID дважды -->
    <!-- <div id="site-header">Это неправильно!</div> -->
</body>
</html>`,
      },
    },

    {
      id: "slide-18",
      title: "CSS для ID",
      type: "code",
      content:
        "В CSS ID селектор начинается с символа решётки (#). Стили, применённые через ID, имеют высокий приоритет и переопределяют стили классов и тегов. Помните: один ID используется только для одного элемента.",
      codeExample: {
        language: "css",
        title: "Файл styles.css с ID селекторами",
        code: `/* Стили для уникальной шапки сайта */
#site-header {
  background-color: #2c3e50;
  color: white;
  padding: 20px;
  text-align: center;
}

/* Стили для главной навигации */
#main-nav {
  margin-top: 15px;
}

#main-nav a {
  color: white;
  margin: 0 15px;
  text-decoration: none;
  font-weight: bold;
}

/* Стили для основного контента */
#main-content {
  max-width: 1200px;
  margin: 40px auto;
  padding: 0 20px;
  min-height: 500px;
}

/* Стили для подвала */
#site-footer {
  background-color: #34495e;
  color: white;
  text-align: center;
  padding: 30px;
  margin-top: 50px;
}`,
      },
    },

    {
      id: "slide-19",
      title: "ID vs Класс: когда что использовать",
      type: "two-column",
      content:
        "Понимание разницы между ID и классом критически важно для правильной организации CSS кода",
      leftContent: {
        title: "Используйте ID когда:",
        items: [
          "Элемент уникален на странице",
          "Нужна якорная ссылка для навигации",
          "Элемент используется в JavaScript",
          "Связываете label с input в формах",
          "Создаёте структурные блоки (header, footer)",
        ],
      },
      rightContent: {
        title: "Используйте класс когда:",
        items: [
          "Стиль применяется к нескольким элементам",
          "Создаёте переиспользуемый компонент",
          "Элемент может повторяться",
          "Нужна гибкость в стилизации",
          "В 90% случаев стилизации CSS",
        ],
      },
    },

    {
      id: "slide-20",
      title: "Комбинирование селекторов",
      type: "code",
      content:
        "CSS позволяет комбинировать селекторы для более точного выбора элементов. Это мощный инструмент для создания сложных, но эффективных правил стилизации без необходимости создавать множество классов.",
      codeExample: {
        language: "css",
        title: "Комбинированные селекторы",
        code: `/* Селектор потомка: все параграфы внутри article */
article p {
  color: #555;
  line-height: 1.8;
}

/* Прямой потомок: только параграфы первого уровня */
.content > p {
  font-size: 18px;
}

/* Группировка: одинаковые стили для разных элементов */
h1, h2, h3 {
  font-family: 'Georgia', serif;
  color: #2c3e50;
}

/* Несколько классов: элемент должен иметь оба класса */
.card.featured {
  border: 2px solid gold;
}

/* Элемент с классом внутри элемента с ID */
#main-content .highlight {
  background-color: yellow;
}

/* Соседний селектор: элемент сразу после */
h2 + p {
  font-weight: bold;
}`,
      },
    },

    {
      id: "slide-21",
      title: "Основные свойства цвета",
      type: "content",
      content:
        "Цвет — один из важнейших аспектов дизайна. CSS предоставляет множество способов работы с цветом для текста, фона и границ элементов.\n\n**Основные свойства цвета:**\n\n**color** — цвет текста\nУправляет цветом содержимого элемента (обычно текста).\n\n**background-color** — цвет фона\nЗадаёт цвет фона элемента. Фон находится под текстом и другим содержимым.\n\n**border-color** — цвет границы\nОпределяет цвет рамки вокруг элемента.\n\n**Способы задания цвета:**\n1. **Именованные цвета:** red, blue, green, white, black и т.д.\n2. **HEX (шестнадцатеричный):** #FF0000, #00FF00, #0000FF\n3. **RGB:** rgb(255, 0, 0) — красный, зелёный, синий (0-255)\n4. **RGBA:** rgba(255, 0, 0, 0.5) — как RGB, но с прозрачностью (0-1)\n5. **HSL:** hsl(0, 100%, 50%) — оттенок, насыщенность, яркость\n6. **HSLA:** hsla(0, 100%, 50%, 0.5) — HSL с прозрачностью",
    },

    {
      id: "slide-22",
      title: "Работа с цветом",
      type: "code",
      content:
        "Рассмотрим различные способы задания цвета в CSS. Каждый способ имеет свои преимущества: именованные цвета просты для запоминания, HEX удобен для копирования из дизайнов, RGB/RGBA позволяет работать с прозрачностью.",
      codeExample: {
        language: "css",
        title: "Различные способы задания цвета",
        code: `/* Именованные цвета - самый простой способ */
h1 {
  color: red;
  background-color: lightblue;
}

/* HEX цвета - используются чаще всего */
p {
  color: #333333;        /* Тёмно-серый текст */
  background-color: #f5f5f5;  /* Светло-серый фон */
}

/* Короткая запись HEX */
.box {
  color: #fff;           /* Белый = #ffffff */
  background-color: #000; /* Чёрный = #000000 */
}

/* RGB - красный, зелёный, синий (0-255) */
.button {
  color: rgb(255, 255, 255);      /* Белый */
  background-color: rgb(52, 152, 219);  /* Синий */
}

/* RGBA - с прозрачностью (0-1) */
.overlay {
  background-color: rgba(0, 0, 0, 0.5);  /* Полупрозрачный чёрный */
}

/* HSL - оттенок (0-360), насыщенность (%), яркость (%) */
.card {
  background-color: hsl(200, 50%, 90%);
}`,
      },
    },

    {
      id: "slide-23",
      title: "Свойства текста и шрифта",
      type: "content",
      content:
        "CSS предоставляет множество свойств для управления внешним видом текста. Правильная типографика критически важна для читаемости и профессионального вида сайта.\n\n**Основные свойства шрифта:**\n\n**font-family** — выбор шрифта или семейства шрифтов\nМожно указать несколько шрифтов через запятую (если первый недоступен, браузер использует следующий).\n\n**font-size** — размер шрифта\nМожет быть в пикселях (px), процентах (%), em, rem и других единицах.\n\n**font-weight** — насыщенность шрифта\nЗначения: normal, bold, 100-900 (100 — самый тонкий, 900 — самый жирный).\n\n**font-style** — стиль шрифта\nЗначения: normal, italic (курсив), oblique (наклонный).\n\n**line-height** — высота строки (межстрочный интервал)\nВлияет на читаемость текста. Обычно 1.4-1.8 для основного текста.\n\n**text-align** — выравнивание текста\nЗначения: left, right, center, justify.\n\n**text-decoration** — оформление текста\nЗначения: none, underline, overline, line-through.\n\n**text-transform** — трансформация регистра\nЗначения: uppercase, lowercase, capitalize.",
    },

    {
      id: "slide-24",
      title: "Стилизация текста и шрифтов",
      type: "code",
      content:
        "Рассмотрим практические примеры работы с текстом. Эти свойства позволяют полностью контролировать внешний вид текстового содержимого на вашей странице.",
      codeExample: {
        language: "css",
        title: "Свойства текста и шрифта",
        code: `/* Настройка основного шрифта страницы */
body {
  font-family: 'Arial', 'Helvetica', sans-serif;
  font-size: 16px;
  line-height: 1.6;
  color: #333;
}

/* Стили для заголовков */
h1 {
  font-size: 36px;
  font-weight: bold;
  text-align: center;
  text-transform: uppercase;
  letter-spacing: 2px;  /* Расстояние между буквами */
}

h2 {
  font-size: 28px;
  font-weight: 600;
  margin-bottom: 20px;
}

/* Стили для ссылок */
a {
  color: #3498db;
  text-decoration: none;  /* Убираем подчёркивание */
}

a:hover {
  text-decoration: underline;  /* Появляется при наведении */
}

/* Курсивный текст */
.quote {
  font-style: italic;
  font-size: 18px;
  color: #555;
}

/* Жирный текст */
.important {
  font-weight: bold;
  color: #e74c3c;
}`,
      },
    },

    {
      id: "slide-25",
      title: "Блочная модель CSS (Box Model)",
      type: "content",
      content:
        "**Блочная модель** — фундаментальная концепция CSS, описывающая, как элементы занимают пространство на странице. Каждый элемент представляется как прямоугольная коробка, состоящая из нескольких слоёв.\n\n**Компоненты блочной модели (от центра к краю):**\n\n**1. Content (содержимое)**\nСамое внутреннее пространство, где отображается текст, изображения и другой контент. Размер задаётся свойствами width и height.\n\n**2. Padding (внутренний отступ)**\nПространство между содержимым и границей элемента. Padding увеличивает размер элемента, создавая «воздух» вокруг содержимого. Наследует цвет фона элемента.\n\n**3. Border (граница)**\nРамка вокруг элемента. Может иметь разную толщину, стиль и цвет. Видима по умолчанию, если задана.\n\n**4. Margin (внешний отступ)**\nПространство снаружи границы, отделяющее элемент от других элементов. Margin прозрачен и не имеет цвета фона.\n\n**Формула расчёта полного размера элемента:**\nШирина = width + padding-left + padding-right + border-left + border-right\nВысота = height + padding-top + padding-bottom + border-top + border-bottom\n\n*Примечание: margin не включается в размер элемента, но влияет на расстояние между элементами.*",
    },

    {
      id: "slide-26",
      title: "Отступы: margin и padding",
      type: "code",
      content:
        "Margin и padding — два ключевых свойства для управления пространством. Padding создаёт пространство внутри элемента, margin — снаружи. Понимание разницы критически важно для правильной вёрстки.",
      codeExample: {
        language: "css",
        title: "Работа с margin и padding",
        code: `/* Padding - внутренний отступ (внутри элемента) */
.box {
  padding: 20px;  /* 20px со всех сторон */
  background-color: lightblue;
}

/* Padding для каждой стороны отдельно */
.card {
  padding-top: 15px;
  padding-right: 20px;
  padding-bottom: 15px;
  padding-left: 20px;
}

/* Короткая запись padding */
.element {
  padding: 10px 20px;  /* 10px сверху/снизу, 20px слева/справа */
  padding: 10px 15px 20px 25px;  /* верх, право, низ, лево (по часовой) */
}

/* Margin - внешний отступ (снаружи элемента) */
.section {
  margin: 30px;  /* 30px со всех сторон */
}

/* Margin для каждой стороны */
.header {
  margin-top: 0;
  margin-bottom: 40px;
  margin-left: auto;   /* Выравнивание по центру */
  margin-right: auto;  /* вместе с margin-left: auto */
}

/* Центрирование блока с фиксированной шириной */
.container {
  width: 1200px;
  margin: 0 auto;  /* 0 сверху/снизу, auto слева/справа = по центру */
}`,
      },
    },

    {
      id: "slide-27",
      title: "Границы (border)",
      type: "code",
      content:
        "Border создаёт видимую рамку вокруг элемента. Граница имеет три основных характеристики: толщину, стиль и цвет. Границы можно настраивать для каждой стороны отдельно или для всех сразу.",
      codeExample: {
        language: "css",
        title: "Работа с границами",
        code: `/* Полная запись border */
.box {
  border-width: 2px;
  border-style: solid;
  border-color: #3498db;
}

/* Короткая запись (рекомендуется) */
.card {
  border: 2px solid #3498db;
  /* толщина стиль цвет */
}

/* Различные стили границ */
.dashed {
  border: 2px dashed red;     /* Пунктирная */
}

.dotted {
  border: 2px dotted blue;    /* Точечная */
}

.double {
  border: 5px double green;   /* Двойная */
}

/* Границы для отдельных сторон */
.element {
  border-top: 3px solid red;
  border-bottom: 1px solid gray;
  border-left: none;   /* Нет границы слева */
  border-right: 2px dashed blue;
}

/* Скруглённые углы */
.rounded {
  border: 2px solid #e74c3c;
  border-radius: 10px;  /* Все углы */
}

.circle {
  border-radius: 50%;  /* Круг (для квадратных элементов) */
}`,
      },
    },

    {
      id: "slide-28",
      title: "Box-sizing: изменение модели расчёта размеров",
      type: "code",
      content:
        "По умолчанию width и height задают размер только содержимого (content). Padding и border добавляются к этому размеру, что усложняет расчёты. Свойство box-sizing: border-box решает эту проблему, включая padding и border в заданный размер.",
      codeExample: {
        language: "css",
        title: "Box-sizing",
        code: `/* Стандартное поведение (content-box) */
.box-default {
  width: 200px;
  padding: 20px;
  border: 2px solid black;
  /* Реальная ширина = 200 + 40 (padding) + 4 (border) = 244px */
}

/* Рекомендуемый способ (border-box) */
.box-modern {
  box-sizing: border-box;
  width: 200px;
  padding: 20px;
  border: 2px solid black;
  /* Реальная ширина = 200px (padding и border внутри!) */
}

/* Применение ко всем элементам (лучшая практика) */
/* Добавьте это в начало вашего CSS */
* {
  box-sizing: border-box;
}

/* Теперь все элементы работают предсказуемо */
.element {
  width: 100%;  /* Будет занимать 100%, даже с padding */
  padding: 20px;
  border: 1px solid #ddd;
}`,
      },
    },

    {
      id: "slide-29",
      title: "Display: типы отображения элементов",
      type: "content",
      content:
        "Свойство **display** определяет, как элемент отображается на странице и как он взаимодействует с другими элементами. Это одно из важнейших свойств CSS.\n\n**Основные значения display:**\n\n**block (блочный)**\n• Занимает всю доступную ширину\n• Начинается с новой строки\n• Можно задать width, height, margin, padding\n• Примеры: div, p, h1-h6, section, header, footer\n\n**inline (строчный)**\n• Занимает только необходимую ширину\n• Располагается в одной строке с другими inline элементами\n• НЕЛЬЗЯ задать width, height\n• Вертикальные margin/padding могут работать некорректно\n• Примеры: span, a, strong, em\n\n**inline-block**\n• Ведёт себя как inline (располагается в строке)\n• Но позволяет задавать width, height, margin, padding\n• Идеален для создания сеток без flexbox\n\n**none**\n• Элемент полностью удаляется из потока документа\n• Не занимает места, невидим\n• Используется для скрытия элементов\n\n**flex**\n• Создаёт flex-контейнер (flexbox)\n• Мощный инструмент для создания макетов\n\n**grid**\n• Создаёт grid-контейнер\n• Для сложных двумерных макетов",
    },

    {
      id: "slide-30",
      title: "Примеры display",
      type: "code",
      content:
        "Рассмотрим практические примеры использования различных значений display. Понимание разницы между block, inline и inline-block критически важно для создания правильных макетов.",
      codeExample: {
        language: "css",
        title: "Свойство display",
        code: `/* Блочный элемент (по умолчанию для div, p, h1...) */
.block-element {
  display: block;
  width: 300px;      /* Можно задать ширину */
  height: 200px;     /* Можно задать высоту */
  margin: 20px;      /* Все отступы работают */
  background-color: lightblue;
}

/* Строчный элемент (по умолчанию для span, a...) */
.inline-element {
  display: inline;
  /* width и height не работают! */
  padding: 5px 10px;  /* Горизонтальные работают, вертикальные - частично */
  background-color: yellow;
}

/* Inline-block - лучшее из двух миров */
.inline-block-element {
  display: inline-block;
  width: 150px;      /* Работает! */
  height: 150px;     /* Работает! */
  margin: 10px;      /* Работает полностью */
  background-color: lightgreen;
}

/* Скрытие элемента */
.hidden {
  display: none;  /* Элемент полностью удалён из потока */
}

/* Превращаем ссылки в блоки (для меню) */
nav a {
  display: block;
  padding: 10px 20px;
  background-color: #3498db;
  color: white;
  margin-bottom: 5px;
}`,
      },
    },

    {
      id: "slide-31",
      title: "Позиционирование элементов",
      type: "content",
      content:
        "Свойство **position** определяет метод позиционирования элемента на странице. Это мощный инструмент для создания сложных макетов, наложений и фиксированных элементов.\n\n**Типы позиционирования:**\n\n**static (по умолчанию)**\n• Стандартный поток документа\n• Элементы располагаются один за другим\n• Свойства top, right, bottom, left не работают\n\n**relative (относительное)**\n• Элемент остаётся в потоке документа\n• Можно сдвинуть относительно своего обычного положения\n• Исходное место остаётся зарезервированным\n• Используется как точка отсчёта для absolute-потомков\n\n**absolute (абсолютное)**\n• Элемент УДАЛЯЕТСЯ из потока документа\n• Позиционируется относительно ближайшего positioned предка\n• Если такого нет — относительно body\n• Остальные элементы ведут себя так, будто его нет\n\n**fixed (фиксированное)**\n• Элемент удаляется из потока\n• Позиционируется относительно окна браузера\n• Остаётся на месте при прокрутке страницы\n• Идеально для фиксированных меню и кнопок\n\n**sticky (липкое)**\n• Гибрид relative и fixed\n• Ведёт себя как relative, пока не достигнет указанной позиции\n• Затем становится fixed\n• Идеально для заголовков таблиц и меню",
    },

    {
      id: "slide-32",
      title: "Примеры позиционирования",
      type: "code",
      content:
        "Позиционирование используется вместе со свойствами top, right, bottom, left для точного размещения элементов. Z-index управляет порядком наложения элементов друг на друга.",
      codeExample: {
        language: "css",
        title: "Position в действии",
        code: `/* Относительное позиционирование */
.relative-box {
  position: relative;
  top: 20px;     /* Сдвиг вниз на 20px */
  left: 30px;    /* Сдвиг вправо на 30px */
  background-color: lightblue;
}

/* Абсолютное позиционирование */
.parent {
  position: relative;  /* Создаём точку отсчёта */
  width: 400px;
  height: 300px;
  background-color: #f0f0f0;
}

.absolute-child {
  position: absolute;
  top: 10px;      /* 10px от верха родителя */
  right: 10px;    /* 10px от правого края родителя */
  width: 100px;
  height: 100px;
  background-color: coral;
}

/* Фиксированное меню (остаётся при прокрутке) */
.fixed-header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background-color: #2c3e50;
  color: white;
  padding: 15px;
  z-index: 1000;  /* Поверх других элементов */
}

/* Липкий заголовок */
.sticky-title {
  position: sticky;
  top: 0;  /* Прилипает к верху при прокрутке */
  background-color: white;
  padding: 10px;
  border-bottom: 2px solid #ddd;
}

/* Z-index для управления слоями */
.layer-1 {
  position: relative;
  z-index: 1;
}

.layer-2 {
  position: relative;
  z-index: 2;  /* Будет поверх layer-1 */
}`,
      },
    },

    {
      id: "slide-33",
      title: "Flexbox: современная система макетов",
      type: "content",
      content:
        "**Flexbox (Flexible Box Layout)** — современная и мощная система создания макетов в CSS. Flexbox решает проблемы, которые раньше требовали сложных решений: вертикальное центрирование, равные по высоте колонки, гибкое распределение пространства.\n\n**Основные концепции:**\n\n**Flex-контейнер**\nРодительский элемент с `display: flex` или `display: inline-flex`\n\n**Flex-элементы**\nПрямые дочерние элементы flex-контейнера\n\n**Главная ось (main axis)**\nНаправление расположения элементов (по умолчанию — горизонтально)\n\n**Поперечная ось (cross axis)**\nПерпендикулярна главной оси\n\n**Основные свойства контейнера:**\n• `flex-direction` — направление главной оси (row, column)\n• `justify-content` — выравнивание по главной оси\n• `align-items` — выравнивание по поперечной оси\n• `flex-wrap` — перенос элементов на новую строку\n• `gap` — расстояние между элементами\n\n**Основные свойства элементов:**\n• `flex-grow` — способность расти\n• `flex-shrink` — способность сжиматься\n• `flex-basis` — базовый размер\n• `flex` — короткая запись (grow shrink basis)\n• `align-self` — индивидуальное выравнивание",
    },

    {
      id: "slide-34",
      title: "Flexbox: базовые примеры",
      type: "code",
      content:
        "Flexbox делает создание макетов интуитивно понятным. Рассмотрим базовые примеры, которые решают типичные задачи вёрстки: горизонтальное меню, карточки продуктов, центрирование элементов.",
      codeExample: {
        language: "css",
        title: "Основы Flexbox",
        code: `/* Создание flex-контейнера */
.container {
  display: flex;
}

/* Горизонтальное меню с равными отступами */
.nav {
  display: flex;
  justify-content: space-between;  /* Элементы по краям */
  align-items: center;  /* Вертикальное выравнивание */
  padding: 15px;
  background-color: #34495e;
}

.nav-item {
  color: white;
  padding: 10px 15px;
}

/* Карточки продуктов в ряд */
.products {
  display: flex;
  gap: 20px;  /* Расстояние между карточками */
}

.product-card {
  flex: 1;  /* Карточки равной ширины */
  padding: 20px;
  border: 1px solid #ddd;
}

/* Колоночный макет */
.sidebar-layout {
  display: flex;
}

.sidebar {
  flex: 0 0 250px;  /* Фиксированная ширина 250px */
  background-color: #f5f5f5;
}

.main-content {
  flex: 1;  /* Занимает оставшееся пространство */
  padding: 20px;
}

/* Центрирование элемента */
.center-box {
  display: flex;
  justify-content: center;  /* По горизонтали */
  align-items: center;      /* По вертикали */
  height: 100vh;  /* На всю высоту экрана */
}`,
      },
    },

    {
      id: "slide-35",
      title: "Flexbox: расширенные возможности",
      type: "code",
      content:
        "Flexbox предоставляет множество опций для точной настройки макета. Свойства flex-direction, flex-wrap и align-content дают полный контроль над расположением элементов.",
      codeExample: {
        language: "css",
        title: "Продвинутый Flexbox",
        code: `/* Вертикальное расположение */
.vertical-container {
  display: flex;
  flex-direction: column;  /* Элементы друг под другом */
  height: 100vh;
}

.header {
  flex: 0 0 60px;  /* Фиксированная высота */
}

.content {
  flex: 1;  /* Занимает всё доступное пространство */
}

.footer {
  flex: 0 0 80px;
}

/* Перенос элементов на новую строку */
.gallery {
  display: flex;
  flex-wrap: wrap;  /* Переносить элементы */
  gap: 15px;
}

.gallery-item {
  flex: 0 0 calc(33.333% - 10px);  /* 3 элемента в ряд */
}

/* Выравнивание множества строк */
.multi-row {
  display: flex;
  flex-wrap: wrap;
  align-content: space-around;  /* Распределение строк */
  height: 500px;
}

/* Изменение порядка элементов */
.item-1 {
  order: 2;  /* Будет отображаться вторым */
}

.item-2 {
  order: 1;  /* Будет отображаться первым */
}

/* Индивидуальное выравнивание */
.special-item {
  align-self: flex-end;  /* Прижат к низу, остальные - нет */
}`,
      },
    },

    {
      id: "slide-36",
      title: "Псевдоклассы: стили для состояний",
      type: "content",
      content:
        "**Псевдоклассы** позволяют применять стили к элементам на основе их состояния или положения в документе. Они начинаются с двоеточия и добавляются к селектору.\n\n**Интерактивные псевдоклассы:**\n\n**:hover** — при наведении курсора мыши\nИспользуется для создания интерактивных эффектов при наведении.\n\n**:active** — в момент клика\nСтиль применяется, пока кнопка мыши нажата.\n\n**:focus** — когда элемент в фокусе\nВажно для доступности, особенно для полей ввода.\n\n**:visited** — для посещённых ссылок\nПозволяет стилизовать уже посещённые ссылки.\n\n**Структурные псевдоклассы:**\n\n**:first-child** — первый дочерний элемент\n**:last-child** — последний дочерний элемент\n**:nth-child(n)** — n-ый дочерний элемент\n**:nth-of-type(n)** — n-ый элемент определённого типа\n\n**Другие полезные:**\n\n**:not(селектор)** — элементы, НЕ соответствующие селектору\n**:disabled** — отключённые элементы форм\n**:checked** — отмеченные чекбоксы/радиокнопки",
    },

    {
      id: "slide-37",
      title: "Примеры псевдоклассов",
      type: "code",
      content:
        "Псевдоклассы делают сайт живым и интерактивным. Они реагируют на действия пользователя без JavaScript, улучшая пользовательский опыт и добавляя визуальную обратную связь.",
      codeExample: {
        language: "css",
        title: "Использование псевдоклассов",
        code: `/* Эффект при наведении на ссылку */
a {
  color: #3498db;
  transition: color 0.3s;  /* Плавный переход */
}

a:hover {
  color: #e74c3c;
  text-decoration: underline;
}

/* Посещённые ссылки */
a:visited {
  color: #9b59b6;
}

/* Интерактивная кнопка */
.button {
  background-color: #3498db;
  color: white;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  transition: all 0.3s;
}

.button:hover {
  background-color: #2980b9;
  transform: scale(1.05);  /* Небольшое увеличение */
}

.button:active {
  transform: scale(0.95);  /* Сжатие при клике */
}

/* Фокус на поле ввода */
input:focus {
  outline: none;
  border-color: #3498db;
  box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
}

/* Стилизация первого/последнего элемента */
li:first-child {
  font-weight: bold;
  color: #e74c3c;
}

li:last-child {
  border-bottom: none;
}

/* Каждый второй элемент (зебра) */
tr:nth-child(even) {
  background-color: #f9f9f9;
}

tr:nth-child(odd) {
  background-color: white;
}

/* Все параграфы, кроме первого */
p:not(:first-child) {
  margin-top: 15px;
}

/* Отключённые элементы формы */
input:disabled {
  background-color: #e0e0e0;
  cursor: not-allowed;
}

/* Отмеченные чекбоксы */
input[type="checkbox"]:checked {
  accent-color: #27ae60;
}`,
      },
    },

    {
      id: "slide-38",
      title: "Псевдоэлементы: создание виртуальных элементов",
      type: "content",
      content:
        "**Псевдоэлементы** позволяют стилизовать определённые части элемента или создавать виртуальные элементы без добавления HTML. Они начинаются с двух двоеточий (::).\n\n**Основные псевдоэлементы:**\n\n**::before**\nСоздаёт виртуальный элемент ПЕРЕД содержимым элемента.\n• Требует свойство content (даже если пустое)\n• Может использоваться для иконок, декоративных элементов\n• Является inline элементом по умолчанию\n\n**::after**\nСоздаёт виртуальный элемент ПОСЛЕ содержимого элемента.\n• Работает аналогично ::before\n• Часто используется для clearfix, декоративных элементов\n• Популярен для добавления иконок после текста\n\n**::first-letter**\nСтилизует первую букву текста.\n• Используется для буквиц в статьях\n• Можно применять только к блочным элементам\n\n**::first-line**\nСтилизует первую строку текста.\n• Автоматически адаптируется при изменении размера окна\n\n**::selection**\nСтилизует выделенный пользователем текст.\n• Можно изменить цвет фона и текста выделения\n\n**::placeholder**\nСтилизует placeholder в полях ввода.\n• Полезно для единообразного дизайна форм",
    },

    {
      id: "slide-39",
      title: "Примеры псевдоэлементов",
      type: "code",
      content:
        "Псевдоэлементы — мощный инструмент для создания сложных дизайнов без лишнего HTML. Они позволяют добавлять декоративные элементы, иконки и эффекты чисто через CSS.",
      codeExample: {
        language: "css",
        title: "Использование псевдоэлементов",
        code: `/* Добавление содержимого перед элементом */
.info::before {
  content: "ℹ ";  /* Символ информации */
  color: #3498db;
  font-weight: bold;
}

/* Добавление иконки после ссылки */
a[href^="http"]::after {
  content: " ↗";  /* Стрелка для внешних ссылок */
  font-size: 0.8em;
  color: #95a5a6;
}

/* Декоративная линия над заголовком */
h2::before {
  content: "";
  display: block;
  width: 50px;
  height: 3px;
  background-color: #e74c3c;
  margin-bottom: 10px;
}

/* Буквица (большая первая буква) */
.article::first-letter {
  font-size: 3em;
  font-weight: bold;
  color: #2c3e50;
  float: left;
  margin-right: 5px;
  line-height: 1;
}

/* Стилизация первой строки */
p::first-line {
  font-weight: bold;
  color: #34495e;
}

/* Выделение текста */
::selection {
  background-color: #3498db;
  color: white;
}

/* Placeholder в input */
input::placeholder {
  color: #95a5a6;
  font-style: italic;
}

/* Создание кавычек для цитат */
blockquote::before {
  content: open-quote;
  font-size: 4em;
  color: #bdc3c7;
}

/* Clearfix с помощью ::after */
.clearfix::after {
  content: "";
  display: table;
  clear: both;
}`,
      },
    },

    {
      id: "slide-40",
      title: "Единицы измерения в CSS",
      type: "content",
      content:
        "CSS предоставляет различные единицы измерения для задания размеров. Правильный выбор единиц критически важен для адаптивного и гибкого дизайна.\n\n**Абсолютные единицы:**\n\n**px (пиксели)**\n• Самая распространённая единица\n• 1px = 1 точка на экране (на стандартных дисплеях)\n• Фиксированный размер\n• Идеальны для границ, мелких отступов\n\n**Относительные единицы:**\n\n**% (проценты)**\n• Относительно родительского элемента\n• width: 50% = половина ширины родителя\n• Идеальны для адаптивных макетов\n\n**em**\n• Относительно размера шрифта родителя\n• 1em = текущий размер шрифта\n• Может накапливаться при вложенности\n• Хорошо для отступов, связанных с размером текста\n\n**rem (root em)**\n• Относительно размера шрифта корневого элемента (html)\n• НЕ накапливается при вложенности\n• Более предсказуемо, чем em\n• Отличный выбор для современной разработки\n\n**vw/vh (viewport width/height)**\n• 1vw = 1% ширины окна браузера\n• 1vh = 1% высоты окна браузера\n• Идеальны для полноэкранных секций\n• 100vh = полная высота экрана\n\n**vmin/vmax**\n• vmin = меньшее из vw или vh\n• vmax = большее из vw или vh\n• Полезны для адаптивной типографики",
    },

    {
      id: "slide-41",
      title: "Примеры единиц измерения",
      type: "code",
      content:
        "Понимание различных единиц измерения и их правильное применение — ключ к созданию адаптивных и масштабируемых дизайнов. Рассмотрим практические примеры использования каждой единицы.",
      codeExample: {
        language: "css",
        title: "Единицы измерения в действии",
        code: `/* Базовый размер шрифта для rem */
html {
  font-size: 16px;  /* 1rem = 16px */
}

/* Пиксели - для точных размеров */
.border-box {
  border: 2px solid black;
  padding: 10px;
  margin-bottom: 20px;
}

/* Проценты - для адаптивной ширины */
.container {
  width: 90%;  /* 90% ширины родителя */
  max-width: 1200px;  /* Максимум 1200px */
  margin: 0 auto;
}

/* em - относительно родителя */
.text-block {
  font-size: 16px;
}

.text-block p {
  font-size: 1.2em;     /* 1.2 * 16px = 19.2px */
  margin-bottom: 1em;   /* 19.2px (размер текущего шрифта) */
}

/* rem - относительно root, более предсказуемо */
h1 {
  font-size: 2.5rem;    /* 2.5 * 16px = 40px */
  margin-bottom: 1rem;  /* 16px */
}

p {
  font-size: 1rem;      /* 16px */
  line-height: 1.6;     /* без единиц = множитель */
}

/* Viewport единицы - для полноэкранных секций */
.hero {
  height: 100vh;  /* Полная высота экрана */
  width: 100vw;   /* Полная ширина экрана */
}

.half-screen {
  width: 50vw;    /* Половина ширины экрана */
}

/* Адаптивная типографика */
.responsive-text {
  font-size: calc(16px + 2vw);  /* Растёт с размером экрана */
}

/* Комбинирование единиц */
.card {
  width: calc(33.333% - 20px);  /* Треть ширины минус отступ */
  padding: 1.5rem;
  margin: 10px;
}`,
      },
    },

    {
      id: "slide-42",
      title: "Адаптивный дизайн: медиа-запросы",
      type: "content",
      content:
        "**Медиа-запросы (Media Queries)** позволяют применять различные стили в зависимости от характеристик устройства: ширины экрана, ориентации, разрешения. Это основа адаптивного (responsive) дизайна.\n\n**Синтаксис медиа-запроса:**\n`css\n@media (условие) {\n  /* CSS правила */\n}\n`\n\n**Основные условия:**\n\n**min-width** — минимальная ширина экрана\nСтили применяются, когда экран ШИРЕ указанного значения.\n\n**max-width** — максимальная ширина экрана\nСтили применяются, когда экран УЖЕ указанного значения.\n\n**orientation** — ориентация устройства\nЗначения: portrait (вертикальная), landscape (горизонтальная).\n\n**Стандартные breakpoints (точки перелома):**\n• **Мобильные:** до 768px\n• **Планшеты:** 768px - 1024px\n• **Десктоп:** от 1024px\n• **Большие экраны:** от 1440px\n\n**Подход Mobile-First:**\nБазовые стили для мобильных, затем расширение для больших экранов:\n`css\n/* Базовые стили для мобильных */\n.element { ... }\n\n/* Для планшетов и больше */\n@media (min-width: 768px) { ... }\n\n/* Для десктопа */\n@media (min-width: 1024px) { ... }\n`",
    },

    {
      id: "slide-43",
      title: "Примеры медиа-запросов",
      type: "code",
      content:
        "Медиа-запросы позволяют создавать дизайн, который красиво выглядит на любом устройстве. Современный подход — начинать с мобильных устройств (mobile-first) и постепенно добавлять стили для больших экранов.",
      codeExample: {
        language: "css",
        title: "Адаптивный дизайн с медиа-запросами",
        code: `/* Базовые стили для мобильных устройств */
.container {
  width: 100%;
  padding: 15px;
}

.grid {
  display: flex;
  flex-direction: column;  /* В столбик на мобильных */
  gap: 15px;
}

.card {
  width: 100%;
}

/* Планшеты (от 768px) */
@media (min-width: 768px) {
  .container {
    width: 90%;
    max-width: 720px;
    margin: 0 auto;
  }
  
  .grid {
    flex-direction: row;  /* В ряд на планшетах */
    flex-wrap: wrap;
  }
  
  .card {
    width: calc(50% - 10px);  /* 2 колонки */
  }
}

/* Десктоп (от 1024px) */
@media (min-width: 1024px) {
  .container {
    max-width: 960px;
    padding: 30px;
  }
  
  .card {
    width: calc(33.333% - 10px);  /* 3 колонки */
  }
  
  .sidebar {
    display: block;  /* Показываем сайдбар на десктопе */
  }
}

/* Большие экраны (от 1440px) */
@media (min-width: 1440px) {
  .container {
    max-width: 1200px;
  }
}

/* Только для мобильных (до 768px) */
@media (max-width: 767px) {
  .desktop-only {
    display: none;  /* Скрываем на мобильных */
  }
  
  .mobile-menu {
    display: block;
  }
}

/* Ориентация устройства */
@media (orientation: landscape) {
  .hero {
    height: 70vh;  /* Меньше высота в горизонтальной ориентации */
  }
}

/* Комбинирование условий */
@media (min-width: 768px) and (max-width: 1023px) {
  /* Только для планшетов */
  .tablet-specific {
    display: block;
  }
}`,
      },
    },

    {
      id: "slide-44",
      title: "Переходы и анимации: transition",
      type: "content",
      content:
        "**Transition (переходы)** позволяют плавно изменять значения CSS свойств за определённое время. Это делает интерфейс более живым и приятным для пользователя.\n\n**Свойства transition:**\n\n**transition-property**\nКакое свойство анимировать (color, background, transform и т.д.)\nМожно указать `all` для анимации всех изменяемых свойств.\n\n**transition-duration**\nДлительность перехода (в секундах или миллисекундах)\nПример: 0.3s, 300ms\n\n**transition-timing-function**\nФункция времени (как меняется скорость):\n• ease (по умолчанию) — медленно-быстро-медленно\n• linear — равномерно\n• ease-in — ускорение\n• ease-out — замедление\n• ease-in-out — ускорение и замедление\n• cubic-bezier() — пользовательская функция\n\n**transition-delay**\nЗадержка перед началом перехода\n\n**Короткая запись:**\n`css\ntransition: свойство длительность функция задержка;\ntransition: all 0.3s ease 0s;\n`\n\n**Что можно анимировать:**\n• Цвета (color, background-color)\n• Размеры (width, height, font-size)\n• Отступы (margin, padding)\n• Позиции (top, left, transform)\n• Прозрачность (opacity)\n• И многое другое!",
    },

    {
      id: "slide-45",
      title: "Примеры transition",
      type: "code",
      content:
        "Переходы добавляют интерактивность и делают пользовательский опыт более приятным. Даже простые эффекты при наведении могут значительно улучшить восприятие сайта.",
      codeExample: {
        language: "css",
        title: "Плавные переходы",
        code: `/* Базовый переход при наведении */
.button {
  background-color: #3498db;
  color: white;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.button:hover {
  background-color: #2980b9;
}

/* Множественные переходы */
.card {
  background-color: white;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  transition: transform 0.3s ease, 
              box-shadow 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);  /* Поднимается вверх */
  box-shadow: 0 5px 15px rgba(0,0,0,0.2);
}

/* Плавное изменение цвета ссылки */
a {
  color: #3498db;
  text-decoration: none;
  transition: color 0.2s ease;
}

a:hover {
  color: #e74c3c;
}

/* Анимация всех свойств */
.box {
  width: 100px;
  height: 100px;
  background-color: coral;
  transition: all 0.5s ease;
}

.box:hover {
  width: 150px;
  height: 150px;
  background-color: lightblue;
  border-radius: 50%;
}

/* С задержкой */
.menu-item {
  opacity: 0.7;
  transition: opacity 0.3s ease 0.1s;  /* Задержка 0.1s */
}

.menu-item:hover {
  opacity: 1;
}

/* Разные функции времени */
.bounce {
  transition: transform 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

.bounce:hover {
  transform: scale(1.2);
}`,
      },
    },

    {
      id: "slide-46",
      title: "Трансформации: transform",
      type: "content",
      content:
        "**Transform (трансформации)** позволяют изменять внешний вид элементов: перемещать, вращать, масштабировать и наклонять без изменения потока документа.\n\n**Основные функции transform:**\n\n**translate(x, y)** — перемещение\n• translateX(x) — по горизонтали\n• translateY(y) — по вертикали\n• translate(x, y) — по обеим осям\nПример: translate(50px, 100px)\n\n**scale(x, y)** — масштабирование\n• scale(1.5) — увеличение в 1.5 раза\n• scale(0.5) — уменьшение в 2 раза\n• scaleX(), scaleY() — по отдельным осям\n\n**rotate(угол)** — вращение\n• rotate(45deg) — поворот на 45 градусов\n• rotate(-90deg) — против часовой стрелки\n\n**skew(x, y)** — наклон\n• skewX(20deg) — наклон по X\n• skewY(10deg) — наклон по Y\n\n**Комбинирование:**\n`css\ntransform: translate(50px, 0) rotate(45deg) scale(1.2);\n`\n\n**transform-origin** — точка трансформации\nПо умолчанию — центр элемента (50% 50%)\nМожно изменить: top left, center, bottom right, 20px 30px\n\n**Преимущества transform:**\n• Не влияет на поток документа\n• Аппаратное ускорение (быстрая работа)\n• Плавная анимация",
    },

    {
      id: "slide-47",
      title: "Примеры трансформаций",
      type: "code",
      content:
        "Трансформации открывают безграничные возможности для создания интересных визуальных эффектов. В комбинации с transition они создают плавные и впечатляющие анимации.",
      codeExample: {
        language: "css",
        title: "Transform в действии",
        code: `/* Перемещение при наведении */
.slide-right {
  transition: transform 0.3s ease;
}

.slide-right:hover {
  transform: translateX(10px);  /* Сдвиг вправо */
}

/* Увеличение (zoom effect) */
.zoom-card {
  transition: transform 0.3s ease;
}

.zoom-card:hover {
  transform: scale(1.1);  /* Увеличение на 10% */
}

/* Вращение */
.rotate-icon {
  transition: transform 0.5s ease;
}

.rotate-icon:hover {
  transform: rotate(360deg);  /* Полный оборот */
}

/* Комбинирование эффектов */
.fancy-button {
  transition: transform 0.3s ease;
}

.fancy-button:hover {
  transform: translateY(-3px) scale(1.05);
}

.fancy-button:active {
  transform: translateY(1px) scale(0.98);
}

/* Флип-карточка (переворот) */
.flip-card {
  transition: transform 0.6s;
  transform-style: preserve-3d;
}

.flip-card:hover {
  transform: rotateY(180deg);
}

/* Изменение точки трансформации */
.corner-rotation {
  transform-origin: top left;  /* Вращение от левого верхнего угла */
  transition: transform 0.5s ease;
}

.corner-rotation:hover {
  transform: rotate(15deg);
}

/* 3D трансформации */
.card-3d {
  transition: transform 0.5s ease;
}

.card-3d:hover {
  transform: perspective(1000px) rotateX(10deg) rotateY(10deg);
}`,
      },
    },

    {
      id: "slide-48",
      title: "Тени: box-shadow и text-shadow",
      type: "code",
      content:
        "Тени добавляют глубину и объём элементам, делая дизайн более современным и трёхмерным. Box-shadow для элементов, text-shadow для текста.",
      codeExample: {
        language: "css",
        title: "Работа с тенями",
        code: `/* Базовая тень для карточки */
.card {
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  /* x y размытие цвет */
}

/* Тень при наведении */
.card-hover {
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  transition: box-shadow 0.3s ease;
}

.card-hover:hover {
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

/* Множественные тени */
.layered-shadow {
  box-shadow: 
    0 1px 3px rgba(0,0,0,0.12),
    0 1px 2px rgba(0,0,0,0.24);
}

/* Внутренняя тень */
.inset-shadow {
  box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.2);
}

/* Свечение */
.glow {
  box-shadow: 0 0 20px rgba(52, 152, 219, 0.6);
}

/* Тень для текста */
h1 {
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
  /* x y размытие цвет */
}

/* Эффект свечения текста */
.neon-text {
  color: white;
  text-shadow: 
    0 0 10px #fff,
    0 0 20px #fff,
    0 0 30px #3498db,
    0 0 40px #3498db;
}

/* Объёмный текст */
.3d-text {
  text-shadow: 
    1px 1px 0 #ccc,
    2px 2px 0 #bbb,
    3px 3px 0 #aaa,
    4px 4px 0 #999;
}`,
      },
    },

    {
      id: "slide-49",
      title: "Полезные советы и лучшие практики",
      type: "list",
      content:
        "Рекомендации для написания качественного и поддерживаемого CSS кода:",
      items: [
        "Используйте внешние CSS файлы, а не inline-стили или <style> теги",
        "Применяйте box-sizing: border-box ко всем элементам для упрощения расчётов",
        "Предпочитайте классы вместо ID для стилизации",
        "Используйте осмысленные имена классов: .button, .card, .header",
        "Группируйте связанные стили вместе и добавляйте комментарии",
        "Начинайте с мобильной версии (mobile-first подход)",
        "Используйте Flexbox для одномерных макетов, Grid — для двумерных",
        "Добавляйте transition для плавности интерактивных элементов",
        "Тестируйте дизайн на разных размерах экранов",
        "Используйте CSS переменные (custom properties) для повторяющихся значений",
        "Минимизируйте вложенность селекторов (не более 3-4 уровней)",
        "Избегайте !important, используйте правильную специфичность",
      ],
    },

    {
      id: "slide-50",
      title: "CSS переменные (Custom Properties)",
      type: "code",
      content:
        "CSS переменные позволяют хранить значения для повторного использования. Это упрощает поддержку кода и позволяет легко менять цветовые схемы и другие параметры дизайна.",
      codeExample: {
        language: "css",
        title: "CSS переменные",
        code: `/* Определение переменных в :root (доступны везде) */
:root {
  --primary-color: #3498db;
  --secondary-color: #2ecc71;
  --danger-color: #e74c3c;
  --text-color: #333;
  --bg-color: #f5f5f5;
  --spacing-unit: 8px;
  --border-radius: 4px;
}

/* Использование переменных */
.button {
  background-color: var(--primary-color);
  color: white;
  padding: calc(var(--spacing-unit) * 2);
  border-radius: var(--border-radius);
}

.button:hover {
  background-color: var(--secondary-color);
}

/* Переопределение переменных для темы */
.dark-theme {
  --primary-color: #2980b9;
  --text-color: #ecf0f1;
  --bg-color: #34495e;
}

/* Значения по умолчанию */
.element {
  color: var(--custom-color, #000);  /* #000 если переменная не определена */
}`,
      },
    },

    {
      id: "slide-51",
      title: "Практический пример: создание карточки",
      type: "code",
      content:
        "Соберём всё изученное вместе и создадим красивую интерактивную карточку товара. Этот пример демонстрирует практическое применение множества CSS техник.",
      codeExample: {
        language: "html",
        title: "HTML структура карточки",
        code: `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Карточка товара</title>
    <link rel="stylesheet" href="card.css">
</head>
<body>
    <div class="container">
        <div class="product-card">
            <div class="card-image">
                <img src="product.jpg" alt="Товар">
                <span class="badge">Новинка</span>
            </div>
            <div class="card-content">
                <h3 class="card-title">Название товара</h3>
                <p class="card-description">
                    Краткое описание товара в несколько строк
                </p>
                <div class="card-footer">
                    <span class="price">1999 ₽</span>
                    <button class="buy-button">Купить</button>
                </div>
            </div>
        </div>
    </div>
</body>
</html>`,
      },
    },

    {
      id: "slide-52",
      title: "Стили для карточки",
      type: "code",
      content:
        "CSS для карточки товара с применением всех изученных техник: flexbox, тени, переходы, трансформации, адаптивность.",
      codeExample: {
        language: "css",
        title: "Файл card.css",
        code: `/* Глобальные стили */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
  background-color: #f5f5f5;
  padding: 40px 20px;
}

/* Контейнер */
.container {
  max-width: 1200px;
  margin: 0 auto;
}

/* Карточка товара */
.product-card {
  background-color: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  max-width: 350px;
}

.product-card:hover {
  transform: translateY(-8px);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
}

/* Изображение */
.card-image {
  position: relative;
  height: 250px;
  overflow: hidden;
}

.card-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.5s ease;
}

.product-card:hover .card-image img {
  transform: scale(1.1);
}

/* Бейдж "Новинка" */
.badge {
  position: absolute;
  top: 15px;
  right: 15px;
  background-color: #e74c3c;
  color: white;
  padding: 5px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: bold;
  text-transform: uppercase;
}

/* Контент карточки */
.card-content {
  padding: 20px;
}

.card-title {
  font-size: 22px;
  color: #2c3e50;
  margin-bottom: 12px;
  font-weight: 600;
}

.card-description {
  color: #7f8c8d;
  line-height: 1.6;
  margin-bottom: 20px;
  font-size: 14px;
}

/* Подвал карточки */
.card-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: 15px;
  border-top: 1px solid #ecf0f1;
}

.price {
  font-size: 28px;
  color: #27ae60;
  font-weight: bold;
}

/* Кнопка покупки */
.buy-button {
  background-color: #3498db;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

.buy-button:hover {
  background-color: #2980b9;
  transform: scale(1.05);
}

.buy-button:active {
  transform: scale(0.98);
}

/* Адаптивность для мобильных */
@media (max-width: 768px) {
  .product-card {
    max-width: 100%;
  }
  
  .card-image {
    height: 200px;
  }
  
  .card-title {
    font-size: 20px;
  }
  
  .price {
    font-size: 24px;
  }
}`,
      },
    },

    {
      id: "slide-53",
      title: "Практический пример: создание навигационного меню",
      type: "code",
      content:
        "Создадим адаптивное горизонтальное меню с использованием Flexbox. На мобильных устройствах меню станет вертикальным.",
      codeExample: {
        language: "html",
        title: "HTML для навигации",
        code: `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Навигационное меню</title>
    <link rel="stylesheet" href="nav.css">
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="#">МойСайт</a>
            </div>
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="#" class="nav-link active">Главная</a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link">О нас</a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link">Услуги</a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link">Портфолио</a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link">Контакты</a>
                </li>
            </ul>
        </div>
    </nav>
    
    <main class="content">
        <h1>Добро пожаловать на наш сайт</h1>
        <p>Контент страницы...</p>
    </main>
</body>
</html>`,
      },
    },

    {
      id: "slide-54",
      title: "CSS для навигации",
      type: "code",
      content:
        "Стили для создания современного, адаптивного навигационного меню с плавными переходами и эффектами при наведении.",
      codeExample: {
        language: "css",
        title: "Файл nav.css",
        code: `/* Сброс стилей */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
  line-height: 1.6;
}

/* Навигационная панель */
.navbar {
  background-color: #2c3e50;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
}

.nav-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/* Логотип */
.nav-logo a {
  color: white;
  font-size: 24px;
  font-weight: bold;
  text-decoration: none;
  padding: 20px 0;
  display: inline-block;
  transition: color 0.3s ease;
}

.nav-logo a:hover {
  color: #3498db;
}

/* Меню */
.nav-menu {
  list-style: none;
  display: flex;
  gap: 0;
}

.nav-item {
  position: relative;
}

.nav-link {
  color: white;
  text-decoration: none;
  padding: 20px 20px;
  display: block;
  transition: all 0.3s ease;
  font-weight: 500;
}

.nav-link:hover {
  background-color: #34495e;
  color: #3498db;
}

/* Активный пункт меню */
.nav-link.active {
  background-color: #3498db;
}

/* Подчёркивание при наведении */
.nav-link::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 0;
  height: 3px;
  background-color: #3498db;
  transition: width 0.3s ease;
}

.nav-link:hover::after {
  width: 80%;
}

.nav-link.active::after {
  width: 0;  /* Не показываем для активного */
}

/* Контент */
.content {
  max-width: 1200px;
  margin: 40px auto;
  padding: 0 20px;
}

/* Адаптивность */
@media (max-width: 768px) {
  .nav-container {
    flex-direction: column;
    padding: 0;
  }
  
  .nav-logo {
    width: 100%;
    text-align: center;
    border-bottom: 1px solid #34495e;
  }
  
  .nav-menu {
    flex-direction: column;
    width: 100%;
  }
  
  .nav-link {
    text-align: center;
    border-bottom: 1px solid #34495e;
  }
  
  .nav-link::after {
    display: none;
  }
}`,
      },
    },

    {
      id: "slide-55",
      title: "Распространённые ошибки и как их избежать",
      type: "two-column",
      content:
        "Знание типичных ошибок поможет писать более качественный и профессиональный CSS код",
      leftContent: {
        title: "Частые ошибки",
        items: [
          "Использование встроенных стилей (inline)",
          "Слишком специфичные селекторы (#id .class .element)",
          "Злоупотребление !important",
          "Забывание box-sizing: border-box",
          "Фиксированные размеры вместо относительных",
          "Отсутствие медиа-запросов",
        ],
      },
      rightContent: {
        title: "Правильный подход",
        items: [
          "Внешние CSS файлы",
          "Простые, понятные селекторы",
          "Правильная специфичность без !important",
          "box-sizing для всех элементов",
          "Относительные единицы (%, em, rem)",
          "Mobile-first и медиа-запросы",
        ],
      },
    },

    {
      id: "slide-56",
      title: "Инструменты для работы с CSS",
      type: "list",
      content: "Полезные инструменты и ресурсы для изучения и работы с CSS:",
      items: [
        "Chrome DevTools / Firefox Developer Tools — отладка и эксперименты",
        "CSS Validator (W3C) — проверка валидности CSS кода",
        "Can I Use — проверка поддержки CSS свойств в браузерах",
        "Flexbox Froggy — игра для изучения Flexbox",
        "CSS Grid Garden — игра для изучения Grid",
        "Coolors.co — генератор цветовых палитр",
        "Google Fonts — бесплатные веб-шрифты",
        "Autoprefixer — автоматические вендорные префиксы",
        "CSS Tricks — обучающие статьи и примеры",
        "CodePen — площадка для экспериментов и примеров",
      ],
    },

    {
      id: "slide-57",
      title: "Следующие шаги в изучении CSS",
      type: "content",
      content:
        "После освоения базовых концепций CSS, вы готовы двигаться дальше и изучать более продвинутые темы:\n\n**CSS Grid Layout**\nДвумерная система макетов для создания сложных сеток. Более мощная, чем Flexbox, для многомерных раскладок.\n\n**CSS Animations**\nСоздание сложных анимаций с помощью @keyframes. Анимация нескольких свойств с точным контролем времени.\n\n**CSS Препроцессоры**\nSass/SCSS, Less — расширения CSS с переменными, вложенностью, миксинами и функциями.\n\n**CSS Методологии**\nBEM, SMACSS, OOCSS — подходы к организации и именованию CSS классов для больших проектов.\n\n**CSS Frameworks**\nBootstrap, Tailwind CSS — готовые решения для быстрой разработки.\n\n**CSS-in-JS**\nСтили в JavaScript файлах (для React, Vue) — styled-components, Emotion.\n\n**Accessibility (A11y)**\nСоздание доступных интерфейсов для пользователей с ограниченными возможностями.\n\n**Performance**\nОптимизация CSS для быстрой загрузки и рендеринга страниц.",
    },

    {
      id: "slide-58",
      title: "Практические задания",
      type: "list",
      content: "Закрепите знания, выполнив эти практические задания:",
      items: [
        "Создайте личную страницу-визитку с навигацией, секциями и контактами",
        "Сверстайте галерею фотографий с использованием Flexbox (3 колонки)",
        "Разработайте адаптивное меню, которое меняется на мобильных устройствах",
        "Создайте карточки товаров с эффектами при наведении (тень, масштаб)",
        "Сделайте форму регистрации с красивой стилизацией полей и кнопок",
        "Реализуйте трёхколоночный макет: шапка, контент с сайдбаром, подвал",
        "Создайте анимированную кнопку с переходами цвета и трансформациями",
        "Разработайте лендинг с hero-секцией на всю высоту экрана",
      ],
    },
  ],
};
